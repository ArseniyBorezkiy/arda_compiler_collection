/*
 * Template for your own grammar reference.
 * Your full name here.
 *
 * This is the noun definition file.
 */

.module /* noun.tpl */

/*
 * '.module' directive defines local wildcard scope. Any wildcard defined in
 * this section will be forgotten when next '.module' directive meets.
 */
 
.language my 1 100 /* see 'lang.tpl.txt' file for details */
.compiler 1 0      /* see 'lang.tpl.txt' file for details */

/* =====================
 * NOUN CLASS DEFINITION
 * ===================== */
 
/*
 * class implementation
 */
 
.class noun {
  pars_orationis
}

/*
 * The classes are sets of the attributes.
 * One attribute can be shared in many classes.
 * But rule matching stops immediatelly if the not shared attributes
 * from different classes meets or class ambiguity meets.
 *
 *   .class <name> {
 *     <member>
 *     ...
 *   }
 *
 *   Where:
 *     <name>   - Unique name of the class.
 *     <member> - Attribute name.
 */
 
/*
 * It's time to introduce your experimental 'lol' language.
 * The 'lol' language has only one noun: 'll'.
 * But there are small assumption: between two consonants can be places
 * arbitrary count of arbitrary vowels.
 *
 * Thus lets describe matching rules for 'lol' noun.
 */

.vocabulary voc_nouns ; /* preemptive declaration, see 'voc.tpl.txt' */
.vocabular .inward mn_stem voc_nouns
 
/*
 * Before definitions of how words should be recognized you can specify
 * phony rule that is equivalent to match word from specified vocabulary.
 * It is means that the rest of the word would be matched at the specified in
 * the match section order (order depends on the position and the direction,
 * see match specification for more details).
 *
 *   .vocabular   <direction> <rule> <dictionary> /* 1 */
 *   .vocabular-l <direction> <rule> <dictionary> /* 2 */
 *   .vocabular-r <direction> <rule> <dictionary> /* 3 */
 *
 * The first variant is used for exact matches (whole rest of the word).
 * The second - for left end subrest matches.
 * The third - for right end subrest matches.
 */

/*
 * rules
 */

.match .forward mn_vowel_left {
  =##
  =#+* mn_vowel_left
}

.match .backward mn_vowel_right {
  =##
  mn_vowel_right +*=#
}

.match .inward-void m_noun {
  mn_vowel_left mn_stem mn_vowel_right | n. noun
}

/*
 * Match specification is the powerful easy mechanism for words recognision.
 * For details see 'adj.tpl.txt' and 'verb.tpl.txt' files.
 */