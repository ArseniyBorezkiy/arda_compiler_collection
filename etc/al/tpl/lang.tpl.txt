/*
 * Template for your own grammar reference.
 * Your full name here.
 *
 * This is the main grammar reference file specified in the compiler
 * server application file located at the 'ebin/al.app'.
 */

.language my 1 100
.compiler 1 0

/*
 * At the beginning of the each grammar reference file the language and
 * compiler information should be presented:
 *
 *   .language <name> <min_version> <max_version>
 *   .compiler <backward_compatibility_version> <forward_compatibility_version>
 *
 * Within the '.language' directive you must specify:
 *   <name> - Your language name, different names within grammar reference are
 *            not allowed. It is the correct way to avoid errors of inattention
 *            caused of many other '.include' directives.
 *   <min_version> - Minimal allowed version of target language.
 *   <max_version> - Maximal allowed version of target language.
 * While the intersection of all intervals [ <min_version> ; <max_version> ]
 * gives the subinterval [ A ; B ] where A <= B the compilation continues.
 * When A > B occured the compilation will fialed immediately.
 *
 * Examlpe for versions:
 *   .language my_language 1 100  /* 1..100 */
 *   .language my_language 2 50   /* 2..50 */
 *   .language my_language 3 100  /* 3..50 */
 *   .language my_language 1 90   /* 3..50 */
 *   .language my_language 1 100  /* 3..50 */
 *   .language my_language 60 100 /* 60..50 */ /* COMPILATION FAILED */
 * Example for names:
 *   .language my_language 1 100   /* 1..100 */
 *   .language my_language 1 90    /* 1..90 */
 *   .language my_tongue   1 90    /* 1..90 */ /* COMPILATION FAILED */
 * Compatibility problem:
 *   Supposing 2 authors of grammar reference exists: Mr. and Mrs.
 *   Mr. wrote grammar F1, F2, F3, F123, files at N time moment.
 *   F123 only uses directive '.include' (see next section) to pull up content
 *   of F1, F2 and F3 files.
 *   In the N+1 moment became known some new information about language
 *   that makes F1 and F3 file obsolete. Mrs. wrote new G1, G3 files
 *   that consider new language information. But language allows use old F3
 *   file with G1 instead of G3 in rare cases. But using F1 with G3 is
 *   strictly forbidded. Thus actual files if G1, F2, G3. And in rare case
 *   allowed G1, F2, F3. But careless Mr. after downloading new files
 *   created G123 to include F1, F2, G3 files.
 *   How to prevent compilation in this case of innatention?
 *   Solution:
 *     The correct way is using '.language' directive in following manner:
 *       F1   /* .language my 1 10  */
 *       F2   /* .language my 1 20  */
 *       F3   /* .language my 1 20  */
 *       F123 /* .language my 1 100 */
 *     Then Mrs. can prevent compatibility problem simply:
 *       G1   /* .language my 11 20 */
 *       G3   /* .language my 11 20 */
 *     Thus when Mr. will write own G123 file the compilation will failed
 *     case of intersection of F1, F2, G3 gives incorrect interval [ 11, 10 ].
 *   The problem is prevented.
 *     
 * Within the '.compiler' directive you must specify:
 *   <backward_compatibility_version> - This version increases inside the
 *                                      compiler release every time when
 *                                      previous grammar references could be
 *                                      incompatible with new version of
 *                                      compiler.
 *   <forward_compatibility_version>  - This version increases inside the
 *                                      compiler release every time when
 *                                      some features are extends grammar
 *                                      specification language or compiler
 *                                      performance. All grammar reference with
 *                                      same backward compatibility version and
 *                                      lesser or equal forward compatibility
 *                                      version still compatible.
 * Both of them must be taken from compiler information for which grammar
 * reference is written. Run your compiler without any arguments and you will
 * have seen something like this:
 *
 *   Arda lexical compiler 1.0.
 *
 * The first number (1) is the backward compatibility version, and the second
 * number (0) is the forward compatibility version.
 *
 */

.vocabular stem

/*
 * Before definitions of how words should be recognized you must specify
 * phony rule that is equivalent to match word from any vocabulary.
 *
 *   .vocabular <rule>
 *
 * This is the lazy processing rule that matches after all horizontal rules
 * of current rule chain is succesfully matched. It is the position independent
 * rule that means you can locate it at any position relative to other rules
 * (see match specification for more details).
 */

.attribute pars_orationis 0 {
  n.   = "noun"
  adj. = "adjective"
  vb.  = "verb"
}

/*
 * It is time to define common attributes that will have each pending word.
 * '.attribute' section represents an enumeration of the mutually exclusive
 * characteristics that can have the investigated word:
 *
 *   .attribute <name> <ordinal> [ .verbose ] {
 *     <member> = <value>
 *     ...
 *   }
 *
 *   Where:
 *     <name>    - Unique name for the word's attribute. It will not be
 *                 appeared in the output generated files if 'minimal' compiler
 *                 flag specified.
 *     <ordinal> - Relative position in the output generated files.
 *                 Most significant and common attributes should have the least
 *                 ordinal number to simplify search for readership.
 *     .verbose  - Optional specificator. If compiler called without
 *                 'verbose' flag such attributes will not appear in output
 *                 generated files. It is applicable to auxiliary attributes
 *                 that has not it own pragmatic sense.
 *     <member>  - The attribute's member name using in matching expressions.
 *                 (see match specification for details).
 *     <value>   - Textual description of the attribute for readership. It is
 *                 not will be appeared in the output generated files if the
 *                 'short' compiler flag specified.
 */
  
  
.include "etc.tpl.txt" /* alphabet, mutations, global wildcards */
.include "adj.tpl.txt"
.include "noun.tpl.txt"
.include "verb.tpl.txt"
.include "voc.tpl.txt"

/*
 * use '.include' directive any time to pull up content of the other files.
 * Its is should be done before the first usage of the external content.
 * Recursive inclusions are not allowed.
 * The recommended file name notation is:
 *
 *   <name>.<lang>.txt
 *
 *   Where:
 *     <name> - the brief name of the file content group. 
 *     <lang> - the 2 or 3 symbol language abbreviation.
 *
 * The recommended names are:
 *   lang - Main language package file that forms full grammar reference
 *          through including special-purpose files.
 *   etc  - Aplhabet definition.
 *   voc  - Vocabulary definitions.
 *   noun - Noun class definition.
 *   verb - Verb class definition.
 *   adj  - Adjective class definition.
 *   ...  - and so on.
 */

.match .forward main {
  m_adjective /* see adj.tpl.txt  */
  m_noun      /* see noun.tpl.txt */
  m_verb      /* see verb.tpl.txt */
}

.target main

/*
 * After pulling up all nessesary files you should specify the main rule.
 * Rule matching starts with the rule specified in the '.target' directive
 * for every word to be compiled.
 *
 *   .target <rule>
 *
 *   Where:
 *     <rule> - The name of the rule for starting with.
 *
 * Here we will discuss matching specification.
 *
 *   .match <direction> <name> {
 *     <expression> [ <separator> <guards> ]
 *     ...
 *   }
 *
 *   Where:
 *     <direction>  - '.forward' or '.backward' specifies would be rule
 *                    applied from left end or right end of the word.
 *                    Stem should be putted in the center of forward and
 *                    backward rules. Usually forward rules is used for
 *                    match prefixes and backward rules for match suffixes
 *                    and endings.
 *     <name>       - The unique name of the rule. Should be have name with
 *                    prefix m*_ where the * is short name or first letter
 *                    of the word class (e.g. 'mn_' for nouns, 'ma_' for
 *                    adjectives and so on).
 *     <expression> - The sequence of the rules' names or special kind
 *                    linguistic-oriented regular expressions that is
 *                    designed to be easy for understanding.
 *     <separator>  - Special keyword '|' specifying the beginning of the
 *                    match guards sequence.
 *     <guards>     - The sequence of the members of the attributes given
 *                    with the 'has' meaning. If the special symbol '~' framed
 *                    within the whitespaces is preceded the member name, it is
 *                    changes meaning 'has' to 'not has' for its one following
 *                    member. Rule matching will stop immediatelly when two
 *                    mutually exclusive members of attribute meets.
 *
 * (see 'adj.tpl.txt', 'noun.tpl.txt' and 'verb.tpl.txt' files for details)
 */
 