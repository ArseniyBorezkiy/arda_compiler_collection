/*
 * Template for your own grammar reference.
 * Your full name here.
 *
 * This is the verb definition file.
 */

.module /* verb.tpl */

/*
 * '.module' directive defines local wildcard scope. Any wildcard defined in
 * this section will be forgotten when next '.module' directive meets.
 */
 
.language my 1 100 /* see 'lang.tpl.txt' file for details */
.compiler 1 0      /* see 'lang.tpl.txt' file for details */

/* =====================
 * VERB CLASS DEFINITION
 * ===================== */
 
/*
 * attributes
 */

.attribute mvb_time 1 {
  V.inf. = "infinitive"
  V.pr.  = "present time"
  V.p.   = "past time"
}

/*
 * Here adjective attributes defined. We have alreafy consider '.attribute'
 * directive in the 'lang.tpl.txt' file.
 */
 
/*
 * class implementation
 */
 
.class verb {
  pars_orationis
  mvb_time
}

/*
 * The classes are sets of the attributes.
 * One attribute can be shared in many classes.
 * But rule matching stops immediatelly if the not shared attributes
 * from different classes meets or class ambiguity meets.
 *
 *   .class <name> {
 *     <member>
 *     ...
 *   }
 *
 *   Where:
 *     <name>   - Unique name of the class.
 *     <member> - Attribute name.
 */
 
/*
 * It's time to introduce your experimental 'lol' language.
 * The 'lol' language has only two verb: 'ololoo' and 'olalaa'.
 * The infinitive coinsides to vocabular stem.
 * Present time of the verb forms by shorthening of the last vowel.
 * Past time forms by replacing of the first vowel 'o' to any other vowel.
 * Note that here we using mutation wildcards (a>aa,o>oo) and (*>o) from
 * file 'etc.tpl.txt'.
 *
 * Thus lets describe matching rules for 'lol' verbs.
 */

.vocabulary voc_verbs ; /* preemptive declaration, see 'voc.tpl.txt' */
.vocabular .inward mvb_stem voc_verbs
 
/*
 * Before definitions of how words should be recognized you can specify
 * phony rule that is equivalent to match word from specified vocabulary.
 * It is means that the rest of the word would be matched at the specified in
 * the match section order (order depends on the position and the direction,
 * see match specification for more details).
 *
 *   .vocabular   <direction> <rule> <dictionary> /* 1 */
 *   .vocabular-l <direction> <rule> <dictionary> /* 2 */
 *   .vocabular-r <direction> <rule> <dictionary> /* 3 */
 *
 * The first variant is used for exact matches (whole rest of the word).
 * The second - for left end subrest matches.
 * The third - for right end subrest matches.
 */

/*
 * rules
 */

.match .backward mvb_time_present { /* e.g.                               */
  =.           | V.inf.             /* '.' is any phoneme ('etc.tpl.txt') */
  -(a>aa,o>oo) | V.pr.              /* ololo -> ololoo, olala -> olalaa   */
}

.match .forward mvb_time_past { /* e.g.                               */
  =.        | V.inf.            /* '.' is any phoneme ('etc.tpl.txt') */
  =~o-(*>o) | V.p.              /* eloloo -> ololoo, ulalaa -> olalaa */
}

.match .inward-void m_verb {
  mvb_time_past mvb_stem    | vb. verb
  mvb_stem mvb_time_present | vb. verb
}

/*
 * Match specification is the powerful easy mechanism for words recognision.
 * Each regular match expression has 3 mode:
 *
 *   '=' match mode:
 *         only comparation.
 *   '+' rift mode:
 *         comparation and rifting from subword copy,
 *         appending detached part to rule 'value' field that could be
 *         found in the output generated files.
 *   '-' hold mode (comparation and holding)
 *         comparation and holding (not detaching),
 *         appending holded part to rule 'value' field that could be
 *         found in the output generated files.
 *
 * Here we are using mutations. Mutations applicable to the edge of the
 * current subword copy only.
 *
 * Example:               /* meaning */
 *   -u(*>o)=e            /* vowel 'u' following vowel 'e'
 *                           ('ue' -> 'oe' for '.forward' rules)
 *                           ('ue' -> 'uo' for '.backward' rules) */
 *   -u(a>aa,o>oo)(*>o)=e /* vowel 'u' following by vowel 'e'
 *                           ('ue' -> never match for '.forward' rules)
 *                           ('ue' -> 'uoo' for '.backward' rules) */
 */
 