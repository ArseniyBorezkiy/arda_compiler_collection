/*
 * Template for your own grammar reference.
 * Your full name here.
 *
 * This is the main grammar reference file specified in the compiler
 * server application file located at the 'ebin/al.app'.
 */

.language my 1 100
.compiler 1 0

/*
 * At the beginning of the each grammar reference file the language and
 * compiler information should be presented:
 *
 *   .language <name> <min_version> <max_version>
 *   .compiler <backward_compatibility_version> <forward_compatibility_version>
 *
 * Within the '.language' directive you must specify:
 *   <name> - your language name, different names within grammar reference are
 *            not allowed. It is the correct way to avoid errors of inattention
 *            caused of many other '.include' directives.
 *   <min_version> - minimal allowed version of target language.
 *   <max_version> - maximal allowed version of target language.
 * While the intersection of all intervals [ <min_version> ; <max_version> ]
 * gives the subinterval [ A ; B ] where A <= B the compilation continues.
 * When A > B occured the compilation will fialed immediately.
 *
 * Examlpe for versions:
 *   .language my_language 1 100  /* 1..100 */
 *   .language my_language 2 50   /* 2..50 */
 *   .language my_language 3 100  /* 3..50 */
 *   .language my_language 1 90   /* 3..50 */
 *   .language my_language 1 100  /* 3..50 */
 *   .language my_language 60 100 /* 60..50 */ /* COMPILATION FAILED */
 * Example for names:
 *   .language my_language 1 100   /* 1..100 */
 *   .language my_language 1 90    /* 1..90 */
 *   .language my_tongue   1 90    /* 1..90 */ /* COMPILATION FAILED */
 * Compatibility problem:
 *   Supposing 2 authors of grammar reference exists: Mr. and Mrs.
 *   Mr. wrote grammar F1, F2, F3, F123, files at N time moment.
 *   F123 only uses directive '.include' (see next section) to pull up content
 *   of F1, F2 and F3 files.
 *   In the N+1 moment became known some new information about language
 *   that makes F1 and F3 file obsolete. Mrs. wrote new G1, G3 files
 *   that consider new language information. But language allows use old F3
 *   file with G1 instead of G3 in rare cases. But using F1 with G3 is
 *   strictly forbidded. Thus actual files if G1, F2, G3. And in rare case
 *   allowed G1, F2, F3. But careless Mr. after downloading new files
 *   created G123 to include F1, F2, G3 files.
 *   How to prevent compilation in this case of innatention?
 *   Solution:
 *     The correct way is using '.language' directive in following manner:
 *       F1   /* .language my 1 10  */
 *       F2   /* .language my 1 20  */
 *       F3   /* .language my 1 20  */
 *       F123 /* .language my 1 100 */
 *     Then Mrs. can prevent compatibility problem simply:
 *       G1   /* .language my 11 20 */
 *       G3   /* .language my 11 20 */
 *     Thus when Mr. will write own G123 file the compilation will failed
 *     case of intersection of F1, F2, G3 gives incorrect interval [ 11, 10 ].
 *   The problem is prevented.
 *     
 * Within the '.compiler' directive you must specify:
 *   <backward_compatibility_version> - this version increases inside the
 *                                      compiler release every time when
 *                                      previous grammar references could be
 *                                      incompatible with new version of
 *                                      compiler.
 *   <forward_compatibility_version>  - this version increases inside the
 *                                      compiler release every time when
 *                                      some features are extends grammar
 *                                      specification language or compiler
 *                                      performance. All grammar reference with
 *                                      same backward compatibility version and
 *                                      lesser or equal forward compatibility
 *                                      version still compatible.
 * Both of them must be taken from compiler information for which grammar
 * reference is written. Run your compiler without any arguments and you will
 * have seen something like this:
 *
 *   Arda lexical compiler 1.0.
 *
 * The first number (1) is the backward compatibility version, and the second
 * number (0) is the forward compatibility version.
 *
 */

.include etc.tpl.txt

/*
 * use '.include' directive any time to pull up content of the other files.
 * Its is should be done before the first usage of the external content.
 * Recursive inclusions are not allowed.
 * The recommended file name notation is:
 *
 *   <name>.<lang>.txt
 *
 *   Where:
 *     <name> is the brief name of the file content group. 
 *     <lang> is the 2 or 3 symbol language abbreviation.
 *
 * The recommended names are:
 *   lang - main language package file that forms full grammar reference
 *          through including special-purpose files.
 *   etc  - aplhabet definition.
 *   voc  - vocabulary definitions.
 *   noun - noun definition.
 *   verb - verb definition.
 *   adj  - adjective definition.
 *   ...  - and so on.
 */
 
 