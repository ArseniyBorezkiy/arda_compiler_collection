/*
 * Quenya grammar reference.
 * Borezkiy Arseniy Petrovich.
 */
 
.module /* verb.qu */

.language quenya 1 100
.compiler 1 0

/* =====================
 * VERB CLASS DEFINITION
 * ===================== */
 
/*
 * attributes
 */

.attribute avb_conjugation 1 .verbose {
  VC.A        = "A-steam verb"
  VC.B        = "basic verb"
  VC.U        = "U-steam verb"
}

.attribute avb_time 2 {
  V.inf.      = "infinitive"
  V.aor.      = "aorist"
  V.imp.      = "imperative"
  V.pr.       = "present continuous"
  V.p.        = "past continuous"
  V.f.        = "future"
  V.pfct.     = "perfect"
  V.paf.      = "past future"
}

.attribute avb_subject 3 {
  V.1p.sg.s.     = "1-st singular subject"
  V.2ip.sg.s.    = "2-nd intimate singular subject"
  V.2fp.sg.s.    = "2-nd formal singular subject"
  V.3p.sg.s.     = "3-rd singular subject"
  V.1p.du.inc.s. = "1-st dual inclusive subject"
  V.1p.du.exc.s. = "1-st dual exclusive subject"
  V.1p.pl.inc.s. = "1-st plural inclusive subject"
  V.1p.pl.exc.s. = "1-st plural exclusive subject"
  V.3p.pl.s.     = "3-rd plural subject"
}

.attribute avb_object 4 {
  V.1p.sg.o.  = "1-st single object"
  V.2ip.sg.o. = "2-nd intimate singular object"
  V.2fp.sg.o. = "2-nd formal singular object"
  V.3p.sg.o.  = "3-rd single object"
  V.3p.pl.o.  = "3-rd plural object"
}

.attribute avb_ending 5 .verbose {
  V.end.      = "with subject or object"
  V.end.no.   = "without subject or object"
}

.attribute avb_vowel_type 6 .verbose {
  V.st.s.w.   = "steam short vowel"
  V.st.l.w.   = "steam long vowel"
}

.attribute avb_augment 7 .verbose {
  V.aug.      = "augment"
  V.aug.no.   = "no augment"
}

.attribute avb_augment_type 8 .verbose {
  V.aug.sep.  = "separated augment type"
  V.aug.fus.  = "fused augment type"
}

.attribute avb_prefix 9 .verbose {
  V.pfx.      = "with prefix"
  V.pfx.no.   = "without prefix"
}

/*
 * class implementation
 */
 
.class verb {
  pars_orationis
  avb_time
  avb_subject
  avb_object
  avb_ending
  avb_vowel_type
  avb_augment
  avb_augment_type
  avb_conjugation
  avb_prefix
}

/*
 * rules
 */
 
.match mvb_long_subject {
  +nye  | V.1p.sg.s.
  +tye  | V.2ip.sg.s.
  +lye  | V.2fp.sg.s.
  +se   | V.3p.sg.s.
  +ngwe | V.1p.du.inc.s.
  +nque | V.1p.du.inc.s.
  +mme  | V.1p.du.exc.s.
  +lve  | V.1p.pl.inc.s.
  +lwe  | V.1p.pl.inc.s.
  +lme  | V.1p.pl.exc.s.
  +lte  | V.3p.pl.s.
  +nte  | V.3p.pl.s.
}

.match mvb_short_subject {
  +n | V.1p.sg.s.
  +t | V.2ip.sg.s.
  +l | V.2fp.sg.s.
}

.match mvb_object {
  +n | V.1p.sg.o.
  +t | V.2ip.sg.o.
  +l | V.2fp.sg.o.
  +s | V.3p.sg.o.
  +t | V.3p.pl.o.
}

.match mvb_time {
  /* A conjugation */
  +a      | VC.A V.inf.
  +a      | VC.A V.aor.
  +a      | VC.A V.imp.
  +ea     | VC.A V.pr.   V.st.l.w.
  +ane    | VC.A V.p.
  +uva    | VC.A V.f.
  +ie     | VC.A V.pfct. V.st.l.w.
  +umne   | VC.A V.paf.
  /* Basic conjugation */
  +e      | VC.B V.inf.  V.end.no.
  +ita    | VC.B V.inf.  V.end.
  +e      | VC.B V.aor.  V.end.no.
  +i      | VC.B V.aor.  V.end.
  +e      | VC.B V.imp.
  +a      | VC.B V.imp.
  +a      | VC.B V.pr.   V.st.l.w.
  +mne    | VC.B V.p.    V.fxn.no. .rappend(.next, m)
  +nne    | VC.B V.p.    V.fxn.no. .rappend(.next, n)
  +rne    | VC.B V.p.    V.fxn.no. .rappend(.next, r)
  +lle    | VC.B V.p.    V.fxn.no. .rappend(.next, l)
  -#N+e   | VC.B V.p.    V.fxn.    .rcast(1, .next, denasaled_consonant)
  +uva    | VC.B V.f.
  +ie     | VC.B V.pfct. V.st.l.w.
  +umne   | VC.B V.paf.
  /* U conjugation */
  +o      | VC.U V.inf.
  -#+we   | VC.U V.aor.  V.end.no.
  -*+ue   | VC.U V.aor.  V.end.no.
  -#+wi   | VC.U V.aor.  V.end.
  -*+ui   | VC.U V.aor.  V.end.
  -#+wa   | VC.U V.pr.   V.st.l.w.
  -*+ua   | VC.U V.pr.   V.st.l.w.
  +une    | VC.U V.p.
  +uva    | VC.U V.f.
  +uuva   | VC.U V.f.
  -#+wie  | VC.U V.pfct. V.st.l.w.
  -*+ie   | VC.U V.pfct. V.st.l.w.
}

.match mvb_augment {
  +@ | V.aug. V.aug.sep.
  +^ | V.aug. V.aug.fus.
  -  | V.aug.no.
}

.match mvb_endings {
  mvb_long_subject mvb_object | V.end.
  mvb_short_subject           | V.end.
  =                           | V.end.no.
}

.match mvb_steam {
  +#@-   | V.aug.sep. V.st.s.w.                      .vocabular(vb., vb_steam))
  +#^-   | V.aug.sep. V.st.l.w.                      .vocabular(vb., .lcast(2, vb_steam, short_vowel)))
  +@-    | V.aug.no.  V.st.s.w.                      .vocabular(vb., vb_steam))
  +^-    | V.aug.no.  V.st.l.w.                      .vocabular(vb., .lcast(1, vb_steam, short_vowel)))
  -^+-   | V.aug.     V.pfx.no. V.aug.fus. V.st.s.w. .vocabular(vb., .lcast(1, vb_steam, short_vowel)))
}

.match mvb_prefix {
  +-     | V.pfx.   V.aug.no.             .vocabular(pr., vb_prefix)
  +#-    | V.pfx.   V.aug.sep.            .vocabular(pr., vb_prefix)
  +*-    | V.pfx.   V.aug.no.             .vocabular(pr., vb_prefix)
  -^+-   | V.pfx.   V.aug.     V.aug.fus. .vocabular(pr., .lcast(1, vb_prefix, short_vowel))
  -      | V.pfx.no.
}

.match .forward m_verb {
  mvb_augment mvb_prefix mvb_steam mvb_time mvb_endings
}
